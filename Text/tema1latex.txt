% This is samplepaper.tex, a sample chapter demonstrating the
% LLNCS macro package for Springer Computer Science proceedings;
% Version 2.20 of 2017/10/04
%
\documentclass[runningheads]{llncs}
%
\usepackage{graphicx}
\usepackage{hyperref}
\usepackage{mathrsfs}
\usepackage{amsfonts}
% Used for displaying a sample figure. If possible, figure files should
% be included in EPS format.
%
% If you use the hyperref package, please uncomment the following line
% to display URLs in blue roman font according to Springer's eBook style:
% \renewcommand\UrlFont{\color{blue}\rmfamily}

\begin{document}
%
\title{Algoritmi de aproximare}
%
%\titlerunning{Abbreviated paper title}
% If the paper title is too long for the running head, you can set
% an abbreviated paper title here
%
\author{Condrea Tudor-Daniel 324CA}
%
\institute{Universitatea Politehnica Bucuresti, Automatica si calculatoare}
%
\maketitle              % typeset the header of the contribution
%
\section{Problema comis-voiajorului}
\subsection{Descrierea problemei rezolvate}
\textbf{Problema comis-voiajorului} ne pune următoarea întrebare: "Fiind dată o listă de orașe și distanța dintre fiecare pereche de orașe, care este cel mai scurt drum care trece prin fiecare oraș și se întoarce și la cel inițial".
%
\noindent Dorim să găsim un algoritm care întoarce secvența de orașe cu cel mai scurt drum de parcurs între ele, asigurându-ne că primul și ultimul oraș coincid.
%
\subsection{Aplicații reale ale problemei:}
%
\begin{itemize}
    \item Logistică. Transportul, în special cel industrializat, necesită o eficiență \newline sporită.
    \item Planificare. Managementul timpului între taskuri poate fi optimizat cu ajutorul acestei probleme.
\end{itemize}
%
\subsection{Specificarea soluțiilor alese}
%
\subsubsection{Algortimi exacți.}
Prima soluție la care ne gândim apelează la permutarea tuturor drumurilor pentru a genera toate posibilitățile din care extragem pe cea cu drumul optim. Această abordare are o complexitate de $O(n!)$ și devine imposibil de utilizat pentru chiar și 20 de orașe.
%

\noindent Putem utiliza programare dinamică, mai exact algoritmul lui \href{https://en.wikipedia.org/wiki/Held\%E2\%80\%93Karp_algorithm}{Held-Karp}, acesta rulând în complexitate de timp $O(2^nn^2)$ care este mult mai bună decât cea factorială, dar folosește mai mult spațiu de memorie $O(n2^n)$ pentru rezultatele funcțiilor, comparativ cu backtracking care utilizează doar $O(n^2)$ pentru graf.
%
\subsubsection{Algoritmi aproximativi.}
Putem utiliza metoda greedy căutând cel mai\\ apropiat vecin pentru fiecare oraș. Această metodă dă în medie un drum cu 25\% mai lung decât cel optim, dar este foarte rapid.
%

\noindent Putem apela la teoria grafurilor, mai exact la algoritmul dezvoltat de\\ \href{https://en.wikipedia.org/wiki/Christofides_algorithm}{Christofides-Serdyukov} care oferă un drum care poate fi cu maxim 1.5 ori mai mare ca cel optim. Acesta folosește proprietățile grafurile Euleriene și arbori minim de acoperire.
%
\subsection{Criterii de evaluare}
Pentru a modela o rețea cu $N$ orașe vom folosi un graf complet $G$ cu $N$ noduri, iar pentru reprezentarea acestuia, o matrice de adiacență $A \in M_n(\mathbb{N})$ unde $a_{ij} = d$, $d$ fiind distanța dintre orașele cu indicii $i$ și $j$.

\noindent Folosim numere naturale pentru ușurința calculelor și pentru a nu permite drumuri de lungimi negative. Niște seturi de valori for fi generate aleator și testate cu fiecare soluție. Rezultatul va afișa distanța totală și secveța de orașe gasită. Pentru testele unde $N > 20$ nu se va mai testa backtracking din cauza lipsei de eficiență.
%
\section{Referințe}
%
\noindent \url{http://www.wseas.us/e-library/transactions/economics/2011/54-095.pdf}\newline
%
\noindent \url{https://en.wikipedia.org/wiki/Travelling_salesman_problem}
\end{document}
